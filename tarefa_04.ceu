////////////////////////
 //Includes and inputs//
////////////////////////

#include "sdl.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

////////////////////////
 ///////Variables///////
////////////////////////

native do
  int SCORE_P1 = 0;
  int SCORE_P2 = 0;
  int WIN_WIDTH = 640;
  int WIN_HEIGTH = 480;
end

var _SDL_Window* win;

finalize
  win = _SDL_CreateWindow("Pong", 0, 0, _WIN_WIDTH, _WIN_HEIGTH, _SDL_WINDOW_SHOWN);
with
  _SDL_DestroyWindow(win);
end

native do
  SDL_Renderer* REN = NULL;
end

finalize
  _REN = _SDL_CreateRenderer(win, -1, 0);
with
  _SDL_DestroyRenderer(_REN);
end

_TTF_Init();
finalize with
  _TTF_Quit();
end

var _TTF_Font[] fnt;
finalize
  fnt = _TTF_OpenFont("Deutsch.ttf", 40);
with
  _TTF_CloseFont(fnt);
end

var _SDL_Texture* tex;
finalize
  tex = _IMG_LoadTexture(_REN, "table.png");
with
  _SDL_DestroyTexture(tex);
end

_srand(_time(null));

////////////////////////
 ////////Class//////////
////////////////////////

/////////Ball///////////

class Ball with
  var _SDL_Rect m_rect;
  var int m_dt;
  var int m_dx;
  var int m_dy;
do
  m_rect.w = 10;
  m_rect.h = 10;
  m_rect.x = _WIN_WIDTH/2 - m_rect.w/2;
  m_rect.y = _WIN_HEIGTH/2 - m_rect.h/2;
  par do
    loop do //velocity up
      await 2000ms;
      if this.m_dt > 1 then
        this.m_dt = this.m_dt - 1;
      end
    end
  with //verify score and move
    loop do
      await (m_dt)ms;
      if (m_rect.y + m_rect.h) > _WIN_HEIGTH or (m_rect.y <= 0)then
        m_dy = -m_dy;
      end
      m_rect.x = m_rect.x + m_dx;
      m_rect.y = m_rect.y + m_dy;
    end
  with  //redesenho
    loop do
      await SDL_REDRAW;
      _SDL_SetRenderDrawColor(_REN, 0, 0, 0, 0);
      _SDL_RenderFillRect(_REN, &m_rect);
    end
  end
end

/////////Player/////////

class Player with
  var _SDL_Rect m_rect;
  var int m_dy;
  var int m_up;
  var int m_down;
do
  m_rect.w = 30;
  m_rect.h = 90;
  m_dy = 16;
  par do
    var _SDL_KeyboardEvent* key; //moving
    every key in SDL_KEYDOWN do
      if key:keysym.sym == m_up and m_rect.y > 0 then
        m_rect.y = m_rect.y - m_dy;  
      else/if key:keysym.sym == m_down and (m_rect.y + m_rect.h) <= _WIN_HEIGTH then
        m_rect.y = m_rect.y + m_dy;
      end
    end
  with  //redraw
    loop do
      await SDL_REDRAW;
      _SDL_SetRenderDrawColor(_REN, 0, 0, 255, 0);
      _SDL_RenderFillRect(_REN, &m_rect);
    end
  end
end

/////////Score/////////

class Score with
  event int goal;
  var _TTF_Font[] m_font;
  var _SDL_Rect m_position;
  var _SDL_Texture[] m_texture;
  var _SDL_Color m_color;
do
  m_position.w = 180;
  m_position.h = 80;
  m_position.y = 0;
  m_color.r = 255;
  m_color.g = 0;
  m_color.b = 0;
  
  par do
    loop do
      var char[50] text;
      var _SDL_Surface[] sfc;
      _sprintf(text, "%d                   %d", _SCORE_P1, _SCORE_P2);
          
      finalize
        sfc = _TTF_RenderText_Blended(m_font, text, m_color);
      with
        _SDL_FreeSurface(sfc);
      end
      finalize
        m_texture = _SDL_CreateTextureFromSurface(_REN, sfc);
      with
        _SDL_DestroyTexture(m_texture);
      end
      await goal;
    end
  with
    loop do
      await SDL_REDRAW;
      _SDL_RenderCopy(_REN, m_texture, null, &m_position);
    end
  end

end

////////////////////////
 ////////Program////////
////////////////////////

par/or do
  loop do  //background
    await SDL_REDRAW;
    _SDL_SetRenderDrawColor(_REN, 255, 255, 255, 0);
    _SDL_RenderFillRect(_REN, null);
    _SDL_RenderCopy(_REN, tex, null, null);
  end
with  //scenario creation
  loop do
    var Player pl1 with
      this.m_rect.x = 0;
      this.m_rect.y = _WIN_HEIGTH/2 - 45;
      this.m_up = _SDLK_w;
      this.m_down = _SDLK_s;
    end;
    var Player pl2 with
      this.m_rect.x = _WIN_WIDTH - 30;
      this.m_rect.y = _WIN_HEIGTH/2 - 45;
      this.m_up = _SDLK_UP;
      this.m_down = _SDLK_DOWN;
    end;
    var Score score with
      this.m_font = fnt;
      this.m_position.x = _WIN_HEIGTH/2 - 20;
    end;
    var Ball ball with
      this.m_dt = 15;
      this.m_dx = -2 + (_rand()%5);
      this.m_dy = -2 + (_rand()%5);
      if this.m_dx == 0 then
        this.m_dx = 1;
      end
      if this.m_dy == 0 then
        this.m_dy = 1;
      end
    end;
    loop do
      await (ball.m_dt)ms;
      if _SDL_HasIntersection(&ball.m_rect, &pl1.m_rect) or _SDL_HasIntersection(&ball.m_rect, &pl2.m_rect) then
        ball.m_dx = -ball.m_dx;
      end

      if (ball.m_rect.x + ball.m_rect.w) > _WIN_WIDTH then
        _SCORE_P1 = _SCORE_P1 + 1;
        emit score.goal => 1;
        break;
      end
      if (ball.m_rect.x <= 0) then
        _SCORE_P2 = _SCORE_P2 + 1;
        emit score.goal => 2;
        break;
      end
    end
  end
with  //redraw end
  loop do
    await SDL_REDRAW;
    _SDL_RenderPresent(_REN);
  end
with
  await SDL_QUIT;
end
escape 0;